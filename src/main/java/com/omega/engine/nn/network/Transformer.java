package com.omega.engine.nn.network;import com.omega.common.data.Tensor;import com.omega.engine.loss.LossType;import com.omega.engine.nn.layer.LayerType;import com.omega.engine.nn.layer.SoftmaxWithCrossEntropyLayer;/** * Recurrent Neural Networks * * @author Administrator */public class Transformer extends Network {    public int en_time = 1;    public int de_time = 1;    public int en_len;    public int de_len;    public Transformer() {    }    @Override    public void init() throws Exception {        // TODO Auto-generated method stub        if (layerList.size() <= 0) {            throw new Exception("layer size must greater than 2.");        }        this.layerCount = layerList.size();        this.setChannel(layerList.get(0).channel);        this.setHeight(layerList.get(0).height);        this.setWidth(layerList.get(0).width);        this.oChannel = this.getLastLayer().oChannel;        this.oHeight = this.getLastLayer().oHeight;        this.oWidth = this.getLastLayer().oWidth;        if (layerList.get(0).getLayerType() != LayerType.input) {            throw new Exception("first layer must be input layer.");        }        if ((layerList.get(layerList.size() - 1).getLayerType() == LayerType.softmax || layerList.get(layerList.size() - 1).getLayerType() == LayerType.softmax_cross_entropy) && this.lossFunction.getLossType() != LossType.cross_entropy) {            throw new Exception("The softmax function support only cross entropy loss function now.");        }        System.out.println("the network is ready.");    }    @Override    public NetworkType getNetworkType() {        // TODO Auto-generated method stub        return NetworkType.TTANSFORMER;    }    @Override    public Tensor predict(Tensor input) {        // TODO Auto-generated method stub        this.RUN_MODEL = RunModel.TEST;        this.forward(input);        return this.getOutput();    }    @Override    public Tensor forward(Tensor input) {        // TODO Auto-generated method stub        return this.getOutput();    }    public Tensor forward(Tensor en_input, Tensor de_input) {        //		System.out.println("en_time:"+en_time+",de_time:"+de_time);        /**         * 设置输入数据         */        this.setInputData(en_input);        return this.getOutput();    }    @Override    public void back(Tensor lossDiff) {        // TODO Auto-generated method stub        /**         * 设置误差         * 将误差值输入到最后一层         */        this.setLossDiff(lossDiff);    }    @Override    public Tensor loss(Tensor output, Tensor label) {        // TODO Auto-generated method stub        switch (this.getLastLayer().getLayerType()) {            case softmax:                //			SoftmaxLayer softmaxLayer = (SoftmaxLayer)this.getLastLayer();                //			softmaxLayer.setCurrentLabel(label);                break;            case softmax_cross_entropy:                SoftmaxWithCrossEntropyLayer softmaxWithCrossEntropyLayer = (SoftmaxWithCrossEntropyLayer) this.getLastLayer();                softmaxWithCrossEntropyLayer.setCurrentLabel(label);                break;            default:                break;        }        return this.lossFunction.loss(output, label);    }    @Override    public Tensor lossDiff(Tensor output, Tensor label) {        // TODO Auto-generated method stub        Tensor t = this.lossFunction.diff(output, label);        //		PrintUtils.printImage(t.data);        return t;    }    @Override    public void clearGrad() {        // TODO Auto-generated method stub    }    @Override    public Tensor loss(Tensor output, Tensor label, Tensor loss) {        // TODO Auto-generated method stub        return this.lossFunction.loss(output, label, loss);    }    @Override    public Tensor lossDiff(Tensor output, Tensor label, Tensor diff) {        // TODO Auto-generated method stub        return this.lossFunction.diff(output, label, diff);    }    @Override    public void putParamters() {        // TODO Auto-generated method stub    }    @Override    public void putParamterGrads() {        // TODO Auto-generated method stub    }}